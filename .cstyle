[Options]
# If set to `true` ignore any leading underscores
# in variable and function names - these will be
# stripped before checking for any possible pointer
# prefix or name format etc.
# 
ignore_leading_underscores: false

# If a variable is a pointer, this prefix is checked
# to exist at the start of the variable name.
pointer_prefix: p

# If set to `true` (and `pointer_prefix` is set),
# then the `pointer_prefix` is
# expected to be repeated by the depth of the
# pointer. i.e. for the argument `char **ppArgv`,
# `pointer_prefix` should be set to `p` and
# `pointer_prefix_repeat` should be `true`.)
pointer_prefix_repeat: false

# If a variable is an array, treat it as a pointer
# for `pointer_prefix` and related checks.
arrays_are_pointers: false

# If set to `true`, will ignore all gotos - disables
# `prefer_goto` checking.
ignore_goto: false

# If set to `true`, will warn when multiple
# `return` statements exist in a single function.
# However, if set to `false` will warn about *any*
# use of `goto` at all.
prefer_goto: false

[Rules]
unexposed_decl: ^.*$
struct_decl: [A-Z][A-Za-z0-9]+
union_decl: [A-Z][A-Za-z0-9]+
class_decl: [A-Z][A-Za-z0-9]+
enum_decl: [A-Z][A-Za-z0-9]+
field_decl: ^.*$
enum_constant_decl: ^.*$
function_decl: (main|[A-Z][A-Za-z0-9]+)
var_decl: ([a-z][A-Za-z0-9]*|[A-Z][A-Za-z0-9]+)
parm_decl: [a-z][A-Za-z0-9]*
objc_interface_decl: ^.*$
objc_category_decl: ^.*$
objc_protocol_decl: ^.*$
objc_property_decl: ^.*$
objc_ivar_decl: ^.*$
objc_instance_method_decl: ^.*$
objc_class_method_decl: ^.*$
objc_implementation_decl: ^.*$
objc_category_impl_decl: ^.*$
typedef_decl: [A-Z][A-Za-z0-9]+
cxx_method: ^.*$
namespace: ^.*$
linkage_spec: ^.*$
constructor: ^.*$
destructor: ^.*$
conversion_function: ^.*$
template_type_parameter: ^.*$
template_non_type_parameter: ^.*$
template_template_parameter: ^.*$
function_template: ^.*$
class_template: ^.*$
class_template_partial_specialization: ^.*$
namespace_alias: ^.*$
using_directive: ^.*$
using_declaration: ^.*$
type_alias_decl: ^.*$
objc_synthesize_decl: ^.*$
objc_dynamic_decl: ^.*$
cxx_access_spec_decl: ^.*$
objc_super_class_ref: ^.*$
objc_protocol_ref: ^.*$
objc_class_ref: ^.*$
type_ref: ^.*$
cxx_base_specifier: ^.*$
template_ref: ^.*$
namespace_ref: ^.*$
member_ref: ^.*$
label_ref: ^.*$
overloaded_decl_ref: ^.*$
variable_ref: ^.*$
invalid_file: ^.*$
no_decl_found: ^.*$
not_implemented: ^.*$
invalid_code: ^.*$
unexposed_expr: ^.*$
decl_ref_expr: ^.*$
member_ref_expr: ^.*$
call_expr: ^.*$
objc_message_expr: ^.*$
block_expr: ^.*$
integer_literal: ^.*$
floating_literal: ^.*$
imaginary_literal: ^.*$
string_literal: ^.*$
character_literal: ^.*$
paren_expr: ^.*$
unary_operator: ^.*$
array_subscript_expr: ^.*$
binary_operator: .* .* .*
compound_assignment_operator: [A-Za-z0-9]+ .* [A-Za-z0-9]+
conditional_operator: [A-Za-z0-9]+ .* [A-Za-z0-9]+
cstyle_cast_expr: (.*)[A-Za-z0-9]+
compound_literal_expr: ^.*$
init_list_expr: ^.*$
addr_label_expr: ^.*$
stmtexpr: ^.*$
generic_selection_expr: ^.*$
gnu_null_expr: ^.*$
cxx_static_cast_expr: ^.*$
cxx_dynamic_cast_expr: ^.*$
cxx_reinterpret_cast_expr: ^.*$
cxx_const_cast_expr: ^.*$
cxx_functional_cast_expr: ^.*$
cxx_typeid_expr: ^.*$
cxx_bool_literal_expr: ^.*$
cxx_null_ptr_literal_expr: ^.*$
cxx_this_expr: ^.*$
cxx_throw_expr: ^.*$
cxx_new_expr: ^.*$
cxx_delete_expr: ^.*$
cxx_unary_expr: ^.*$
objc_string_literal: ^.*$
objc_encode_expr: ^.*$
objc_selector_expr: ^.*$
objc_protocol_expr: ^.*$
objc_bridge_cast_expr: ^.*$
pack_expansion_expr: ^.*$
size_of_pack_expr: ^.*$
lambda_expr: ^.*$
obj_bool_literal_expr: ^.*$
obj_self_expr: ^.*$
omp_array_section_expr: ^.*$
objc_availability_check_expr: ^.*$
unexposed_stmt: ^.*$
label_stmt: [A-Z][A-Za-z0-9]+
compound_stmt: ^.*$
case_stmt: ^.*$
default_stmt: ^.*$
if_stmt: ^.*$
switch_stmt: ^.*$
while_stmt: ^.*$
do_stmt: ^.*$
for_stmt: ^.*$
goto_stmt: ^.*$
indirect_goto_stmt: ^.*$
continue_stmt: ^.*$
break_stmt: ^.*$
return_stmt: ^.*$
asm_stmt: ^.*$
objc_at_try_stmt: ^.*$
objc_at_catch_stmt: ^.*$
objc_at_finally_stmt: ^.*$
objc_at_throw_stmt: ^.*$
objc_at_synchronized_stmt: ^.*$
objc_autorelease_pool_stmt: ^.*$
objc_for_collection_stmt: ^.*$
cxx_catch_stmt: ^.*$
cxx_try_stmt: ^.*$
cxx_for_range_stmt: ^.*$
seh_try_stmt: ^.*$
seh_except_stmt: ^.*$
seh_finally_stmt: ^.*$
ms_asm_stmt: ^.*$
null_stmt: ^.*$
decl_stmt: ^.*$
omp_parallel_directive: ^.*$
omp_simd_directive: ^.*$
omp_for_directive: ^.*$
omp_sections_directive: ^.*$
omp_section_directive: ^.*$
omp_single_directive: ^.*$
omp_parallel_for_directive: ^.*$
omp_parallel_sections_directive: ^.*$
omp_task_directive: ^.*$
omp_master_directive: ^.*$
omp_critical_directive: ^.*$
omp_taskyield_directive: ^.*$
omp_barrier_directive: ^.*$
omp_taskwait_directive: ^.*$
omp_flush_directive: ^.*$
seh_leave_stmt: ^.*$
omp_ordered_directive: ^.*$
omp_atomic_directive: ^.*$
omp_for_simd_directive: ^.*$
omp_parallelforsimd_directive: ^.*$
omp_target_directive: ^.*$
omp_teams_directive: ^.*$
omp_taskgroup_directive: ^.*$
omp_cancellation_point_directive: ^.*$
omp_cancel_directive: ^.*$
omp_target_data_directive: ^.*$
omp_task_loop_directive: ^.*$
omp_task_loop_simd_directive: ^.*$
omp_distribute_directive: ^.*$
omp_target_enter_data_directive: ^.*$
omp_target_exit_data_directive: ^.*$
omp_target_parallel_directive: ^.*$
omp_target_parallelfor_directive: ^.*$
omp_target_update_directive: ^.*$
omp_distribute_parallelfor_directive: ^.*$
omp_distribute_parallel_for_simd_directive: ^.*$
omp_distribute_simd_directive: ^.*$
omp_target_parallel_for_simd_directive: ^.*$
omp_target_simd_directive: ^.*$
omp_teams_distribute_directive: ^.*$
translation_unit: ^.*$
unexposed_attr: ^.*$
ib_action_attr: ^.*$
ib_outlet_attr: ^.*$
ib_outlet_collection_attr: ^.*$
cxx_final_attr: ^.*$
cxx_override_attr: ^.*$
annotate_attr: ^.*$
asm_label_attr: ^.*$
packed_attr: ^.*$
pure_attr: ^.*$
const_attr: ^.*$
noduplicate_attr: ^.*$
cudaconstant_attr: ^.*$
cudadevice_attr: ^.*$
cudaglobal_attr: ^.*$
cudahost_attr: ^.*$
cudashared_attr: ^.*$
visibility_attr: ^.*$
dllexport_attr: ^.*$
dllimport_attr: ^.*$
convergent_attr: ^.*$
warn_unused_attr: ^.*$
warn_unused_result_attr: ^.*$
aligned_attr: ^.*$
preprocessing_directive: ^.*$
macro_definition: ^.*$
macro_instantiation: ^.*$
inclusion_directive: ^.*$
module_import_decl: ^.*$
type_alias_template_decl: ^.*$
static_assert: ^.*$
friend_decl: ^.*$
overload_candidate: ^.*$
